add_action.c:    p = command_giver->interactive->default_err_message;
add_action.c:    if (command_giver->interactive->iflags & NOTIFY_FAIL_FUNC) {
add_action.c:	    command_giver->interactive->iflags &= ~NOTIFY_FAIL_FUNC;
add_action.c:	    command_giver->interactive->default_err_message.s = 0;
add_action.c:	    command_giver->interactive->default_err_message.s = 0;
add_action.c:	    command_giver->interactive->default_err_message.s = make_shared_string(sp->u.string);
add_action.c:	    command_giver->interactive->iflags |= NOTIFY_FAIL_FUNC;
add_action.c:	    command_giver->interactive->default_err_message.f = sp->u.fp;
backend.c:    if (current_interactive && current_interactive->name)
backend.c:  debug_message("current_interactive is /%s\n", current_interactive->name);
comm.c:        (who->interactive->iflags & (NET_DEAD | CLOSING))) {
comm.c:        (who->interactive->iflags & (NET_DEAD | CLOSING))) {
comm.c:        (who->interactive->iflags & (NET_DEAD | CLOSING))) {
comm.c: * Read pending data for a user into user->interactive->text.
comm.c:    master_ob->interactive->default_err_message.s = 0;
comm.c:    master_ob->interactive->connection_type = external_port[which].kind;
comm.c:    master_ob->interactive->ob = master_ob;
comm.c:    master_ob->interactive->input_to = 0;
comm.c:    master_ob->interactive->iflags = 0;
comm.c:    master_ob->interactive->text[0] = '\0';
comm.c:    master_ob->interactive->text_end = 0;
comm.c:    master_ob->interactive->text_start = 0;
comm.c:    master_ob->interactive->carryover = NULL;
comm.c:    master_ob->interactive->num_carry = 0;
comm.c:    master_ob->interactive->snooped_by = 0;
comm.c:    master_ob->interactive->last_time = current_time;
comm.c:    master_ob->interactive->trace_level = 0;
comm.c:    master_ob->interactive->trace_prefix = 0;
comm.c:    master_ob->interactive->ed_buffer = 0;
comm.c:    master_ob->interactive->compressed_stream = NULL;
comm.c:    master_ob->interactive->message_producer = 0;
comm.c:    master_ob->interactive->message_consumer = 0;
comm.c:    master_ob->interactive->message_length = 0;
comm.c:    master_ob->interactive->state = TS_DATA;
comm.c:    master_ob->interactive->out_of_band = 0;
comm.c:    master_ob->interactive->trans = get_translator("UTF-8");
comm.c:    master_ob->interactive->trans = (struct translation *) master_ob;
comm.c:        master_ob->interactive->slc[x][0] = slc_default_flags[x];
comm.c:        master_ob->interactive->slc[x][1] = slc_default_chars[x];
comm.c:    ob->interactive->ob = ob;
comm.c:    ob->interactive->iflags |= (HAS_WRITE_PROMPT | HAS_PROCESS_INPUT);
comm.c:    if (ob->interactive == 0 || ob->interactive->input_to)
comm.c:    ob->interactive->input_to = sent;
comm.c:    ob->interactive->iflags |= (flags & (I_NOECHO | I_NOESC | I_SINGLE_CHAR));
comm.c:        command_giver->interactive->prompt = str;
comm.c:        tmp = (tmp->interactive ? tmp->interactive->snooped_by : 0);
comm.c:        if (!memcmp(&iptable[i].addr, &ob->interactive->addr, sizeof(ob->interactive->addr)) &&
comm.c:    inet_ntop(AF_INET6, &ob->interactive->addr.sin6_addr, ipv6addr, INET6_ADDRSTRLEN);
comm.c:            if (iptable[i].addr == ob->interactive->addr.sin_addr.s_addr &&
comm.c:    return (inet_ntoa(ob->interactive->addr.sin_addr));
comm.c:    inet_ntop(AF_INET6, &ob->interactive->addr.sin6_addr, ipv6addr, INET6_ADDRSTRLEN);
comm.c:    return (inet_ntoa(ob->interactive->addr.sin_addr));
comm.c:    return ob->interactive->snooped_by;
comm.c:    return (current_time - ob->interactive->last_time);
comm.c:    ob->interactive->iflags |= (HAS_WRITE_PROMPT | HAS_PROCESS_INPUT);
comm.c:    ob->interactive->ob = ob;
ed.c:#define P_NET_DEAD      (command_giver->interactive->iflags & NET_DEAD)
ed.c:        who->interactive->ed_buffer = 0;
ed.c:    who->interactive->ed_buffer = 0;
ed.c:    if (command_giver->interactive->ed_buffer)
ed.c:    current_ed_buffer = command_giver->interactive->ed_buffer =
ed.c:    current_ed_buffer = command_giver->interactive->ed_buffer;
ed.c:    current_ed_buffer = who->interactive->ed_buffer;
efuns_main.c:        eb = sp->u.ob->interactive->ed_buffer;
efuns_main.c:    i = sp->u.ob->interactive && sp->u.ob->interactive->input_to;
efuns_main.c:       i = sp->u.ob->interactive->iflags & USING_MXP;
fliconv.c:      current_object->interactive->trans = newt;
interpret.h:#  define TRACETST(b) (command_giver->interactive->trace_level & (b))
interpret.h:     (command_giver->interactive->trace_prefix == 0 || \
interpret.h:      (current_object && strpref(command_giver->interactive->trace_prefix, \
interpret.h:#  define TRACEHB (current_heart_beat == 0 || (command_giver->interactive->trace_level & TRACE_HEART_BEAT))
simulate.c:    if (ob->interactive && ob->interactive->ed_buffer)
simulate.c:        command_giver->interactive->carryover = x;
simulate.c:        command_giver->interactive->num_carry = num_arg;
simulate.c:        command_giver->interactive->carryover = x;
simulate.c:        command_giver->interactive->num_carry = num_arg;
