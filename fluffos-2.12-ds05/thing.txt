--- /mud/bak/alpha6/fluffos-2.11-ds17/comm.c	2008-07-09 11:59:26.000000000 -0400
+++ comm.c	2008-07-12 11:27:06.000000000 -0400
@@ -15,13 +15,8 @@
 #include "add_action.h"
 #include "eval.h"
 
-#if defined(MINGW)
+#ifdef MINGW
 #define ENOSR 63
-#define MSG_NOSIGNAL 0
-#endif
-
-#if (sun)
-#define MSG_NOSIGNAL 0
 #endif
 
 #ifndef ADDRFAIL_NOTIFY
@@ -194,7 +189,7 @@
 void init_user_conn()
 {
     struct sockaddr_in sin;
-    unsigned int sin_len;
+    socklen_t sin_len;
     int optval;
     int i;
     int have_fd6;
@@ -298,7 +293,6 @@
      * register signal handler for SIGPIPE.
      */
 #if defined(SIGPIPE) && defined(SIGNAL_ERROR)
-    debug(connections, ("Enabling sigpipe_handler.\n"));
     if (signal(SIGPIPE, sigpipe_handler) == SIGNAL_ERROR) {
         debug_perror("init_user_conn: signal SIGPIPE",0);
         exit(5);
@@ -383,13 +377,11 @@
      * connect socket to server address.
      */
     if (connect(server_fd, (struct sockaddr *) & server, sizeof(server)) == -1) {
-        if(ADDRFAIL_NOTIFY){
-            if (socket_errno == ECONNREFUSED )
-                debug_message("Connection to address server (%s %d) refused.\n",
-                              hostname, addr_server_port);
-            else
-                socket_perror("init_addr_server: connect", 0);
-        }
+        if (socket_errno == ECONNREFUSED && ADDRFAIL_NOTIFY)
+            debug_message("Connection to address server (%s %d) refused.\n",
+                          hostname, addr_server_port);
+        else
+            socket_perror("init_addr_server: connect", 0);
         OS_socket_close(server_fd);
         return;
     }
@@ -550,13 +542,8 @@
     }
     ip = who->interactive;
     new_string_data[0] = '\0';
-    /*
-     * this is dangerous since the data may not all fit into new_string_data
-     * but how to tell if it will without trying it first?  I suppose one
-     * could rewrite vsprintf to accept a maximum length (like strncpy) --
-     * have fun!
-     */
-    vsprintf(new_string_data, format, args);
+
+    vsnprintf(new_string_data, LARGEST_PRINTABLE_STRING, format, args);
     va_end(args);
     len = strlen(new_string_data);
 #ifdef SHADOW_CATCH_MESSAGE
@@ -664,7 +651,7 @@
      * if ip is not valid, do nothing.
      */
     if (!ip || (ip->iflags & (NET_DEAD | CLOSING))) {
-      debug(connections, ("flush_message: invalid target!\n"));
+      //debug(connections, ("flush_message: invalid target!\n"));
         return 0;
     }
     /*
@@ -676,12 +663,9 @@
         } else {
             length = MESSAGE_BUF_SIZE - ip->message_consumer;
         }
-
 /* Need to use send to get out of band data
    num_bytes = write(ip->fd,ip->message_buf + ip->message_consumer,length);
  */
-        debug(connections, ("flush_message: calling send on fd %d.\n", ip->fd));
-
 #ifdef HAVE_ZLIB
         if (ip->compressed_stream) {
           num_bytes = send_compressed(ip, (unsigned char *)ip->message_buf +
@@ -689,12 +673,11 @@
         } else {
 #endif
         num_bytes = send(ip->fd, ip->message_buf + ip->message_consumer,
-                         length, ip->out_of_band | MSG_NOSIGNAL);
+                         length, ip->out_of_band);
 #ifdef HAVE_ZLIB
         }
 #endif
         if (!num_bytes) {
-            debug(connections, ("Send failed, setting NET_DEAD.\n"));
             ip->iflags |= NET_DEAD;
             remove_interactive(ip->ob, 0);
             return 0;
@@ -702,18 +685,17 @@
         if (num_bytes == -1) {
 #ifdef EWOULDBLOCK
             if (socket_errno == EWOULDBLOCK) {
-              //debug(connections, ("flush_message: write: Operation would block
+              //debug(connections, ("flush_message: write: Operation would block\n"));
                 return 1;
 #else
             if (0) {
                 ;
 #endif
             } else if (socket_errno == EINTR) {
-                debug(connections, ("flush_message: write: Interrupted system call.\n"));
+              //debug(connections, ("flush_message: write: Interrupted system call"));
                 return 1;
             } else {
               //socket_perror("flush_message: write", 0);
-                debug(connections, ("flush_message: Send failed, setting NET_DEAD.\n"));
                 ip->iflags |= NET_DEAD;
                 remove_interactive(ip->ob, 0);
                 return 0;
@@ -1404,11 +1386,7 @@
 #endif
 {
     debug(connections, ("SIGPIPE received."));
-    
-    /*
-     Eat this for now
     signal(SIGPIPE, sigpipe_handler);
-    */
 }                               /* sigpipe_handler() */
 
 /*
@@ -1545,7 +1523,7 @@
 {
     int new_socket_fd;
     struct sockaddr_in addr;
-    unsigned int length;
+    socklen_t length;
     int i, x;
     object_t *master, *ob;
     svalue_t *ret;
@@ -1553,7 +1531,7 @@
     length = sizeof(addr);
     debug(connections, ("new_user_handler: accept on fd %d\n", external_port[which].fd));
     new_socket_fd = accept(external_port[which].fd,
-                           (struct sockaddr *) & addr, (unsigned int *) &length);
+                           (struct sockaddr *) & addr, &length);
     if (new_socket_fd < 0) {
 #ifdef EWOULDBLOCK
         if (socket_errno == EWOULDBLOCK) {
@@ -1578,7 +1556,6 @@
         OS_socket_close(new_socket_fd);
         return;
     }
-
 #if !(linux) && !(sun) && !defined(MINGW) && !defined(__CYGWIN__)
     i = 1;
 
@@ -1588,7 +1565,6 @@
         /* it's ok if this fails */
     }
 #endif
-
     /* find the first available slot */
     for (i = 0; i < max_users; i++)
         if (!all_users[i]) break;
@@ -1888,7 +1864,7 @@
 
       ret=apply(APPLY_MXP_TAG, ip->ob, 1, ORIGIN_DRIVER);
       if(ret && ret->type==T_NUMBER && ret->u.number){
-        goto exit;
+	goto exit;
       }
     }
 
@@ -2427,8 +2403,8 @@
     msgtype = NAMEBYIP;
     for (i = 0; i < strlen(name); i++){
       if (isalpha(name[i])) {
-        msgtype = IPBYNAME;
-        break;
+	msgtype = IPBYNAME;
+	break;
       }
     }
 
@@ -2754,7 +2730,7 @@
     V_VAR(outbuffer_t *, outbuf, args);
     V_VAR(char *, format, args);
 
-    vsprintf(buf, format, args);
+    vsnprintf(buf, LARGEST_PRINTABLE_STRING, format, args);
     va_end(args);
 
     if (!outbuf) return;
@@ -2858,18 +2834,18 @@
                 } else {
                     nBlock =  4096;
                 }
-                nWrite = send (ip->fd, &ip->compress_buf[iStart], nBlock,
-                               ip->out_of_band);
+                nWrite = send(ip->fd, &ip->compress_buf[iStart], nBlock,
+                              ip->out_of_band);
                 if (nWrite < 0) {
                   fprintf(stderr, "Error sending compressed data (%d)\n",
                           errno);
 
                     if (errno == EAGAIN
 #ifndef WIN32
-                                || errno == ENOSR
+                    		|| errno == ENOSR
 #endif
-                                ) {
-                        ret = 2;
+                    		) {
+                    	ret = 2;
                         break;
                     }
 
@@ -2907,7 +2883,7 @@
     zcompress->avail_in = length;
     while (zcompress->avail_in && (wr == 1 || first)) {
         if(wr == 2)
-          first = 0;
+	  first = 0;
         zcompress->avail_out = COMPRESS_BUF_SIZE - (zcompress->next_out -
                                                    ip->compress_buf);
 
@@ -2945,5 +2921,3 @@
  add_binary_message(command_giver, telnet_do_naws, sizeof(telnet_do_naws));
 }
 #endif
-
-
